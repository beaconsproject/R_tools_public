## BUILDER R Functions

# `calc_lwdci()`

Dendritic connectivity describes the hydrologic connectedness of the stream network within an area.  

Values range between 0 and 1, with 1 indicating a completely connected river network. Dendritic connectivity measures the longitudinal connectivity of a river network inside a set of reserves based on the expected probability of an organism being able to move between two random points in the network. 

## Usage
```r
calc_lwdci(
  conservation_area_sf,
  stream_sf = NULL,
  col_name = NULL,
  buffer_width = NULL
)
```
## Arguments

- conservation_area_sf: sf object of conservation areas in which to calculate DCI.

- stream_sf: (Optional) sf object of river network. Must have streams grouped in a BASIN attribute.

- col_name: (Optional) Single area target value (in m¬≤) to apply to all seeds.

- buffer_width: (Optional) Column in catchments_sf containing individual area targets.

## üì§ Output
A vector of numeric DCI values matching the input features.

## Details
Developed by Cote et al. (2009), the Dendritic Connectivity Index quantifies ‚Äúlongitudinal connectivity of river networks based on the expected probability of an organism being able to move freely between two random points of the network.‚Äù Longitudinal connectivity refers to connections between upstream and downstream sections of the network. The index is calculated as 

<div style="text-align: center;">
  <img src="images/dci.png" alt="DCI formula" width="100" />
</div>

where li is the length of a stream (or river) section and L is the total length of the stream network within the benchmark. The index ranges from 0 (low longitudinal connectivity) to 1 (high longitudinal connectivity). 

**Add a note on if there are 2 ocean drainages, lwdci would be more suitage and link to the function page.**

## Examples
### Running the examples
To estimate DCI index within a reserve (e.g., potential benchmarks, protected area), the user needs to provide the stream network layers that uses **the same coordinate reference system (CRS) as the reserve layer.**. 


1. Download and unzip BEACONs R Tools 

2. Run the examples below.

```r
# Load libraries
library(sf)
library(dplyr)

source("./R/hydrology.R")

# --------------------------------------
# SET PARAMS  --------------------
# --------------------------------------

# Set working directory
setwd("your/path/to/downloads")

dirpath <- getwd()

#Set access path 
reserves <- file.path(dirpath, "data/reserves_sample.shp")
streams <- file.path(dirpath, "data/streams_sample.shp")

colName <- "reserve"

#Create output folder
out_dir <- file.path(dirpath, "shp_output")
if(!dir.exists(out_dir)){
  dir.create(out_dir)
}

# Set if DCI and LWDCI should be added
addDCI <- TRUE
addLWDCI <- TRUE



# --------------------------------------
#--RUN
# --------------------------------------
# Initialize sf objects
reserves_sf <- st_read(reserves)
streams_sf <- st_read(streams)

if(addDCI){
  reserves_sf <- reserves_sf %>%
  mutate(dci = sapply(1:nrow(reserves_sf), function(i) {
    i <- reserves_sf[i, ]
    calc_dci(i, streams_sf, col_name = colName) 
  }))
}
if(addLWDCI){
  reserves_sf <- reserves_sf %>%
  mutate(lwdci = sapply(1:nrow(reserves_sf), function(j) {
    j <- reserves_sf[j, ]
    calc_lwdci(j, streams_sf, col_name = colName) 
  }))
}

#Save results
write_sf(reserves_sf, dsn=file.path(out_dir, "reserves_dci.shp"), append = FALSE)
```
