[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BEACONs R Tools",
    "section": "",
    "text": "Welcome to the BEACONs R tools pages!\nOver the years, BEACONs develops a series of function to ease conservation planning across the landscape. Those functions have been group into categories. This pages aims to document each function and demonstrate their use through example. The functions are target advanced users who work with environmental data at large scale."
  },
  {
    "objectID": "tools/Builder.html",
    "href": "tools/Builder.html",
    "title": "BEACONs R Tools",
    "section": "",
    "text": "BEACONs Builder allows you to build conservation areas following rules of size, intactness, and hydrological connectivity. You can visit the package website here: https://beaconsproject.github.io/beaconsbuilder.\nbeaconsbuilder should be used together with the beaconstools package to construct and analyse sets of conservation areas. More details on how beaconsbuilder works can be found in vignette(“builder”).\nBEACONs Builder has 4 main functions:\n\nseeds\nreserve_seeds\nneighbours\nbuilder\n\n\n\nThe seeds() function creates a seeds table, which is an input to builder().\nIt identifies seed catchments and assigns them an area target.\n\n\nIf no filter arguments are used, all catchments in catchments_sf are included.\nOptions: - Use dplyr::filter() to pre-filter. - Use filter_polygon to keep only catchments whose centroid lies inside the polygon.\n\n\n\nArea targets (in m²) can be provided using one of the following (priority order):\n\nareatarget_value: a single fixed target for all seeds\n\nareatarget_col: column from catchments_sf\n\nareatarget_polygon + areatarget_polygon_col: spatial join, most overlapping polygon used\n\n\n\n\n\n\n\n\nCreate a neighbours table listing neighbours for each catchment.\nFor an sf object of catchments with unique CATCHNUM id’s, calculates a list of neighbouring CATCHNUM pairs and returns them in a long tibble. Neighbours are defined as having at least on point in common (within 0.1m).\n\n\n\nThe builder() function calls the BUILDER software from R. It prepares inputs, runs the external executable, and returns the main output table.\n\n\n\nPrepares input tables: neighbours, seeds, and catchments.\nWrites files to a temp directory (or output_dir if provided).\nConstructs a command to run BUILDER via system().\nReturns the *_COLUMN_All_Unique_BAs.csv file listing conservation areas and their catchments.\n\n\n\n\n\nReturns a tibble of conservation area names and associated catchments.\nIf output_dir is provided, additional BUILDER output tables (e.g., hydrology, summary metrics) are saved.\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nArea target\nSet in the seeds table; minimum size (m²) for each conservation area.\n\n\nCatchment intactness\nMinimum intactness required for catchments to be included.\n\n\nConservation area intactness\nMinimum area-weighted intactness for a conservation area to be returned.\n\n\nArea target proportion\nAllows output of smaller areas (e.g., 0.9 returns areas &gt;= 90% of the area target).\n\n\n\n\n\n\nUse output_dir to preserve BUILDER’s complete outputs when running multiple builds. These files can be further analyzed using beaconstools.\n \n##Citation Please cite the beaconsbuilder package when using it in publications. To cite the latest official version, please use:\nEdwards M, Vernier P, Lisgo K, Houle M, Schmiegelow F (2022). beaconsbuilder: building conservation areas in R. R package version 0.0.0.9000. Available at https://github.com/beaconsproject/beaconsbuilder."
  },
  {
    "objectID": "tools/Builder.html#beacons-builder",
    "href": "tools/Builder.html#beacons-builder",
    "title": "BEACONs R Tools",
    "section": "",
    "text": "BEACONs Builder allows you to build conservation areas following rules of size, intactness, and hydrological connectivity. You can visit the package website here: https://beaconsproject.github.io/beaconsbuilder.\nbeaconsbuilder should be used together with the beaconstools package to construct and analyse sets of conservation areas. More details on how beaconsbuilder works can be found in vignette(“builder”).\nBEACONs Builder has 4 main functions:\n\nseeds\nreserve_seeds\nneighbours\nbuilder\n\n\n\nThe seeds() function creates a seeds table, which is an input to builder().\nIt identifies seed catchments and assigns them an area target.\n\n\nIf no filter arguments are used, all catchments in catchments_sf are included.\nOptions: - Use dplyr::filter() to pre-filter. - Use filter_polygon to keep only catchments whose centroid lies inside the polygon.\n\n\n\nArea targets (in m²) can be provided using one of the following (priority order):\n\nareatarget_value: a single fixed target for all seeds\n\nareatarget_col: column from catchments_sf\n\nareatarget_polygon + areatarget_polygon_col: spatial join, most overlapping polygon used\n\n\n\n\n\n\n\n\nCreate a neighbours table listing neighbours for each catchment.\nFor an sf object of catchments with unique CATCHNUM id’s, calculates a list of neighbouring CATCHNUM pairs and returns them in a long tibble. Neighbours are defined as having at least on point in common (within 0.1m).\n\n\n\nThe builder() function calls the BUILDER software from R. It prepares inputs, runs the external executable, and returns the main output table.\n\n\n\nPrepares input tables: neighbours, seeds, and catchments.\nWrites files to a temp directory (or output_dir if provided).\nConstructs a command to run BUILDER via system().\nReturns the *_COLUMN_All_Unique_BAs.csv file listing conservation areas and their catchments.\n\n\n\n\n\nReturns a tibble of conservation area names and associated catchments.\nIf output_dir is provided, additional BUILDER output tables (e.g., hydrology, summary metrics) are saved.\n\n\n\n\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nArea target\nSet in the seeds table; minimum size (m²) for each conservation area.\n\n\nCatchment intactness\nMinimum intactness required for catchments to be included.\n\n\nConservation area intactness\nMinimum area-weighted intactness for a conservation area to be returned.\n\n\nArea target proportion\nAllows output of smaller areas (e.g., 0.9 returns areas &gt;= 90% of the area target).\n\n\n\n\n\n\nUse output_dir to preserve BUILDER’s complete outputs when running multiple builds. These files can be further analyzed using beaconstools.\n \n##Citation Please cite the beaconsbuilder package when using it in publications. To cite the latest official version, please use:\nEdwards M, Vernier P, Lisgo K, Houle M, Schmiegelow F (2022). beaconsbuilder: building conservation areas in R. R package version 0.0.0.9000. Available at https://github.com/beaconsproject/beaconsbuilder."
  },
  {
    "objectID": "vignettes/createBuilderInput.html",
    "href": "vignettes/createBuilderInput.html",
    "title": "Create Builder input",
    "section": "",
    "text": "This script creates the three required input to run BUILDER (neighbour, seeds and catchments tables).\nThe first step is to locate the catchments shapefiles and point on an output directory where the derived files will be saved. The script uses two functions from the beaconsbuilder package: seeds and neighbour.\nThe neighbours function calculates a list of neighbouring CATCHNUM pairs and returns them in a long tibble. Neighbours are defined as having at least on point in common (within 0.1m).\nThe seeds function creates a list of seed catchments and area targets. Prior to run the function, the user can apply a filter on the catchments dataset by specifying the level of intactness or the STHRALER index the seeds should have.\nBoth functions need the catchments dataset with unique identifier column ‘CATCHNUM’\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path catchment layer\ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\n\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layer\ncatchments_sf &lt;- st_read(catchments)\n\nnghbrs &lt;- neighbours(catchments_sf)\nwrite.csv(nghbrs, file=file.path(out_dir,\"nghbrs.csv\"), row.names=FALSE) \n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(dplyr)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path catchment layer\ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\n\n##OPTION: Filter potential seeds according to catchments intactness and STHRALER index\nintactColname &lt;- \"intactKBA\" # set catchment intactness column\nintact_threshold &lt;- 0.9      # set catchment intactness threshold\nSTRAHLER_ref &lt;- NULL         # set STRAHLER index\n\n##OPTION: Set area target value by choosing one of the following options. Leave argument to NULL  if not chosen\n## Option 1:\nareatarget &lt;- 10000 #ex : areatarget &lt;- 10000\n## Option 2:\nareatarget_col &lt;- NULL #ex : areatarget_col &lt;- \"area_thres\" \n## Option 3:\nareatarget_poly &lt;- NULL # ex: areatarget_poly &lt;- st_read(file.path(dirpath, \"data\", \"poly_areatarget.shp\"))\nareatarget_poly_col &lt;- NULL # ex: areatarget_poly_col &lt;-\"area_thres\"\n\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layer\ncatchments_sf &lt;- st_read(catchments)\n\n# Filter catchments based on intactness and STRAHLER index, create seeds and convert to csv\nseed_sf &lt;- catchments_sf %&gt;%\n  dplyr::filter(.data[[intactColname]] &gt;= intact_threshold, \n         if (!is.null(STRAHLER_ref)) STRAHLER == as.numeric(STRAHLER_ref) else TRUE)\n\nif (!is.null(areatarget)) {\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_value = as.numeric(areatarget))\n} else if (!is.null(areatarget_col)) {\n  # If areatarget is found in a column\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_col = areatarget_col)\n} else if (!is.null(areatarget_poly)) {\n  # If area target is found in a polygon that intersect the catchments_sf\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_polygon = areatarget_poly, areatarget_polygon_col = areatarget_poly_col)\n} else {\n  stop(\"You need to set at least one option\") # Handle case where neither exists\n}\n\nwrite.csv(seed, file=file.path(out_dir, \"seeds.csv\"), row.names=FALSE) # Convert neighbours table to csv file.\n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(dplyr)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path \ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\npas &lt;- file.path(dirpath, \"data\", \"PAs_MDA06.shp\")\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layers\ncatchments_sf &lt;- st_read(catchments)\npas_sf &lt;- st_read(pas)\n\n\nseed &lt;- reserve_seeds(catchments_sf, CAs_sf=pas_sf, CAs_name = \"PARENT_ID\", areatarget_value = 10000, joinType = \"INTERSECT\", out_dir = file.path(dirpath, \"Builder_input\"))\n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(utils)\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path \ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\npas &lt;- file.path(dirpath, \"data\", \"PAs_MDA06.shp\")\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layers\ncatchments_sf &lt;- st_read(catchments)\n\ncatchment &lt;- catchments_sf %&gt;%\n  st_drop_geometry()\nwrite.csv(catchment, file=file.path(out_dir, \"catchments.csv\"), row.names=FALSE) # Convert neighbours table to csv file."
  },
  {
    "objectID": "vignettes/createBuilderInput.html#intro",
    "href": "vignettes/createBuilderInput.html#intro",
    "title": "Create Builder input",
    "section": "",
    "text": "This script creates the three required input to run BUILDER (neighbour, seeds and catchments tables).\nThe first step is to locate the catchments shapefiles and point on an output directory where the derived files will be saved. The script uses two functions from the beaconsbuilder package: seeds and neighbour.\nThe neighbours function calculates a list of neighbouring CATCHNUM pairs and returns them in a long tibble. Neighbours are defined as having at least on point in common (within 0.1m).\nThe seeds function creates a list of seed catchments and area targets. Prior to run the function, the user can apply a filter on the catchments dataset by specifying the level of intactness or the STHRALER index the seeds should have.\nBoth functions need the catchments dataset with unique identifier column ‘CATCHNUM’\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path catchment layer\ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\n\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layer\ncatchments_sf &lt;- st_read(catchments)\n\nnghbrs &lt;- neighbours(catchments_sf)\nwrite.csv(nghbrs, file=file.path(out_dir,\"nghbrs.csv\"), row.names=FALSE) \n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(dplyr)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path catchment layer\ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\n\n##OPTION: Filter potential seeds according to catchments intactness and STHRALER index\nintactColname &lt;- \"intactKBA\" # set catchment intactness column\nintact_threshold &lt;- 0.9      # set catchment intactness threshold\nSTRAHLER_ref &lt;- NULL         # set STRAHLER index\n\n##OPTION: Set area target value by choosing one of the following options. Leave argument to NULL  if not chosen\n## Option 1:\nareatarget &lt;- 10000 #ex : areatarget &lt;- 10000\n## Option 2:\nareatarget_col &lt;- NULL #ex : areatarget_col &lt;- \"area_thres\" \n## Option 3:\nareatarget_poly &lt;- NULL # ex: areatarget_poly &lt;- st_read(file.path(dirpath, \"data\", \"poly_areatarget.shp\"))\nareatarget_poly_col &lt;- NULL # ex: areatarget_poly_col &lt;-\"area_thres\"\n\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layer\ncatchments_sf &lt;- st_read(catchments)\n\n# Filter catchments based on intactness and STRAHLER index, create seeds and convert to csv\nseed_sf &lt;- catchments_sf %&gt;%\n  dplyr::filter(.data[[intactColname]] &gt;= intact_threshold, \n         if (!is.null(STRAHLER_ref)) STRAHLER == as.numeric(STRAHLER_ref) else TRUE)\n\nif (!is.null(areatarget)) {\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_value = as.numeric(areatarget))\n} else if (!is.null(areatarget_col)) {\n  # If areatarget is found in a column\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_col = areatarget_col)\n} else if (!is.null(areatarget_poly)) {\n  # If area target is found in a polygon that intersect the catchments_sf\n  seed &lt;- seeds(catchments_sf = seed_sf, areatarget_polygon = areatarget_poly, areatarget_polygon_col = areatarget_poly_col)\n} else {\n  stop(\"You need to set at least one option\") # Handle case where neither exists\n}\n\nwrite.csv(seed, file=file.path(out_dir, \"seeds.csv\"), row.names=FALSE) # Convert neighbours table to csv file.\n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(dplyr)\nlibrary(utils)\n\nsource(\"./createBuilderInput_dependencies.R\")\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path \ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\npas &lt;- file.path(dirpath, \"data\", \"PAs_MDA06.shp\")\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layers\ncatchments_sf &lt;- st_read(catchments)\npas_sf &lt;- st_read(pas)\n\n\nseed &lt;- reserve_seeds(catchments_sf, CAs_sf=pas_sf, CAs_name = \"PARENT_ID\", areatarget_value = 10000, joinType = \"INTERSECT\", out_dir = file.path(dirpath, \"Builder_input\"))\n\n\n\n\n\n# Load libraries\nlibrary(sf)\nlibrary(utils)\n\n# --------------------------------------\n# SET PARAMS  --------------------\n# --------------------------------------\n#Set access path \ndirpath &lt;- \"E:/MelinaStuff/BEACONs/request/Kim/createBuilderInput\"\n\n#Create output folder\nout_dir &lt;- file.path(dirpath, \"Builder_input\")\nfor(d in out_dir){\n  if(!dir.exists(file.path(out_dir))){\n    dir.create(file.path(out_dir))\n  }\n}\n\n#Set access path \ncatchments &lt;- file.path(dirpath, \"data\", \"catch1M_KBA_MDA06.shp\")\npas &lt;- file.path(dirpath, \"data\", \"PAs_MDA06.shp\")\n\n# --------------------------------------\n#--RUN\n# --------------------------------------\n# Read layers\ncatchments_sf &lt;- st_read(catchments)\n\ncatchment &lt;- catchments_sf %&gt;%\n  st_drop_geometry()\nwrite.csv(catchment, file=file.path(out_dir, \"catchments.csv\"), row.names=FALSE) # Convert neighbours table to csv file."
  }
]