[
  {
    "objectID": "tools/builder.html",
    "href": "tools/builder.html",
    "title": "builder()",
    "section": "",
    "text": "The builder() function call the BUILDER software from R. It prepares and passes all input tables and variables to the BUIDLER executable and returns the builder table to R.\n\n\nbuilder(\n  catchments_sf, \n  seeds, \n  neighbours, \n  out_dir = NULL,\n  catchment_level_intactness = 1, \n  conservation_area_intactness = 1, \n  area_target_proportion = 1, \n  area_type = \"land\", \n  construct_conservation_areas = TRUE,  \n  area_target_multiplier = 1,\n  handle_isolated_catchments = TRUE, \n  output_upstream = FALSE, \n  output_downstream = FALSE, \n  output_hydrology_metrics = FALSE,\n  area_land = \"Area_Land\", \n  area_water = \"Area_Water\",\n  skeluid = \"SKELUID\", \n  catchnum = \"CATCHNUM\", \n  subzone = \"FDA\", \n  zone = \"MDA\", \n  basin = \"BASIN\", \n  order1 = \"ORDER1\",\n  order2 = \"ORDER2\", \n  order3 = \"ORDER3\", \n  stream_length = \"STRMLEN\", \n  intactness = \"intact\", \n  isolated = \"Isolated\",\n  unique_identifier = \"PB\", \n  handler_summary = FALSE, \n  summary_intactness_props = '\"\"', \n  summary_area_target_props = '\"\"'\n)\n\n\n\n\ncatchments_sf: sf object of the catchments dataset with unique identifier column CATCHNUM.\nseeds: Seeds table from seeds() listing seed catchments and area targets.\nneighbours: Neighbours table from neighbours() listing all neighbouring pairs of catchments.\nout_dir: If provided, input (seeds, neighbours and catchments) files and output BUILDER tables will be saved to this directory. Otherwise a temp directory will be used. Function will attempt to create the directory if it doesn’t already exist.\ncatchment_level_intactness: Minimum intactness value for catchment inclusion (between 0-1). i.e. if value of 1 is used, only 100% intact catchments will be used.\nconservation_area_intactness: Minimum area-weighted intactness of final conservation areas. Only conservation areas meeting this value will be returned.\narea_target_proportion: The proportion of the Area target that conservation areas need to meet (0-1) to be returned by the function.\narea_type: If ‘land’, only terrestrial areas are counted towards the area target. If ‘water’, only water areas are counter. If ‘landwater’, all areas are counted.\nconstruct_conservation_areas: Should builder build conservation areas?\narea_target_multiplier: Multiplier applied to the area target in the seed list that allows for adjustments to the area target without having to remake the seeds table.\nhandle_isolated_catchments: Should small isolated catchments be merged into the conservation areas?\noutput_upstream: Should upstream catchments be calculated?\noutput_downstream: Should downstream catchments be calculated?\noutput_hydrology_metrics: Should hydrology metrics be calculated?\narea_land: Catchments column listing the area of land in each catchment.\narea_water: Catchments column listing the area of water in each catchment.\nskeluid: Catchments column listing the skeluid field.\ncatchnum: Catchments column listing the unique catchments ID.\nsubzone: Catchments column listing the hydrological subzone.\nzone: Catchments column listing the hydrological zone.\nbasin: Catchments column listing the basin field.\norder1: Catchments column listing the order 1 field.\norder2: Catchments column listing the order 2 field.\norder3: Catchments column listing the order 3 field.\nstream_length: Catchments column listing stream length.\nintactness: Catchments column listing the intactness value.\nisolated: Catchments column identifying catchments isolated from the stream network.\nunique_identifier: Prefix for conservation area names.\nhandler_summary: Should a summary listing counts of available conservation areas at different intactness and area target proportions be created?\nsummary_intactness_props: If a summary is created, provide the intactness proportions to be summarised in the format ‘0.7,0.8,0.9’.\nsummary_area_target_props: If a summary is created, provide the area target proportions to be summarised in the format ‘0.7,0.8,0.9’.\n\n\n\n\nA tibble with column names representing conservation areas, and rows of catchments making up the conservation areas.\n\n\n\nThis function prepares the input tables (neighbours, seeds, catchments) required by BUILDER in a temp file, then creates a string of parameters that is passed to the BUILDER executable using system(). The BUILDER output tables are saved to the temp file, and the output table listing conservation area names and catchment lists is returned to the R session.\nThis function only returns the BUILDER output table describing the lists of catchments making up each conservation area. We typically recommend using the beaconstools package to calculate hydrology metrics, but hydrology information as well as other summary information is produced by BUILDER. If users want access to the complete set of BUILDER output tables (e.g. hydrology and summary information), a valid output directory can be provided in which case all input and output tables will be saved to that directory. If no output directory is provided a temp folder will be used and deleted after the function completes. As well as providing access to the full list of BUILDER output tables, an output directory is useful in a looped workflow with multiple calls to BUILDER producing multiple sets of output files. In this workflow a different output directory can be used to save each set of output files which can later be processed using the beaconstools package. The main output file listing conservation area names and their catchments is named “*_COLUMN_All_Unique_BAs.csv”.\nThe main parameters to adjust when building conservation areas are:\n\nArea target: Set in the seeds table, this defines the minimum size for each conservation area.\nCatchment-level intactness: Only catchments with intactness values greater than this value will be added to the conservation area.\nConservation area intactness: Only conservation areas with an area-weighted intactness greater than or equal to this value will be returned.\nArea-target proportion: The proportion of the Area target that conservation areas need to meet. Allows output of conservation areas smaller than the area target (e.g. if no conservation areas meet 100% of the area target, area target multiplier can be lowered to 0.9 to search for smaller conservation areas).\n\n\n\n\n\n\n\nCreate the folder structure\n\n# Set working directory\nsetwd(\"your/path/to/downloads\")\n\ndirpath &lt;- getwd()\n\n# Create the folder structure\ntreedir &lt;- c(\"R\",\"data\",\"Builder_output\")\nfor(d in treedir){\n  if (!dir.exists(file.path(dirpath, d))) {\n    dir.create(file.path(dirpath, d), recursive = TRUE)\n  }\n}\n\nDownload the functions, data and example files and save them in the proper folder.\n\n\nDownload builder functions in the R folder\nDownload catchments sample in the data folder\nDownload builder example R script\n\n\nIn R, either:\n\nPlace the files in your working directory (getwd()), or\nUpdate the path in the examples using a data_path variable.\n\nRun the examples below.\n\nlibrary(sf)\n\nsetwd(dirpath)\nsource(\"./R/builder.R\")\n\n# Use all catchments as seeds with a single area target\ncatchments_sample &lt;- readRDS(\"data/catchments_sample.rds\")\n\nnghbrs &lt;- neighbours(catchments_sample)\nseed &lt;- seeds(catchments_sf = catchments_sample, areatarget_value = 1000000000)\nseed &lt;- seed[1:10,]\nbuilder(catchments_sf = catchments_sample, seeds = seed, neighbours = nghbrs, out_dir = file.path(dirpath, \"Builder_output\"))"
  },
  {
    "objectID": "tools/builder.html#usage",
    "href": "tools/builder.html#usage",
    "title": "builder()",
    "section": "",
    "text": "builder(\n  catchments_sf, \n  seeds, \n  neighbours, \n  out_dir = NULL,\n  catchment_level_intactness = 1, \n  conservation_area_intactness = 1, \n  area_target_proportion = 1, \n  area_type = \"land\", \n  construct_conservation_areas = TRUE,  \n  area_target_multiplier = 1,\n  handle_isolated_catchments = TRUE, \n  output_upstream = FALSE, \n  output_downstream = FALSE, \n  output_hydrology_metrics = FALSE,\n  area_land = \"Area_Land\", \n  area_water = \"Area_Water\",\n  skeluid = \"SKELUID\", \n  catchnum = \"CATCHNUM\", \n  subzone = \"FDA\", \n  zone = \"MDA\", \n  basin = \"BASIN\", \n  order1 = \"ORDER1\",\n  order2 = \"ORDER2\", \n  order3 = \"ORDER3\", \n  stream_length = \"STRMLEN\", \n  intactness = \"intact\", \n  isolated = \"Isolated\",\n  unique_identifier = \"PB\", \n  handler_summary = FALSE, \n  summary_intactness_props = '\"\"', \n  summary_area_target_props = '\"\"'\n)"
  },
  {
    "objectID": "tools/builder.html#arguments",
    "href": "tools/builder.html#arguments",
    "title": "builder()",
    "section": "",
    "text": "catchments_sf: sf object of the catchments dataset with unique identifier column CATCHNUM.\nseeds: Seeds table from seeds() listing seed catchments and area targets.\nneighbours: Neighbours table from neighbours() listing all neighbouring pairs of catchments.\nout_dir: If provided, input (seeds, neighbours and catchments) files and output BUILDER tables will be saved to this directory. Otherwise a temp directory will be used. Function will attempt to create the directory if it doesn’t already exist.\ncatchment_level_intactness: Minimum intactness value for catchment inclusion (between 0-1). i.e. if value of 1 is used, only 100% intact catchments will be used.\nconservation_area_intactness: Minimum area-weighted intactness of final conservation areas. Only conservation areas meeting this value will be returned.\narea_target_proportion: The proportion of the Area target that conservation areas need to meet (0-1) to be returned by the function.\narea_type: If ‘land’, only terrestrial areas are counted towards the area target. If ‘water’, only water areas are counter. If ‘landwater’, all areas are counted.\nconstruct_conservation_areas: Should builder build conservation areas?\narea_target_multiplier: Multiplier applied to the area target in the seed list that allows for adjustments to the area target without having to remake the seeds table.\nhandle_isolated_catchments: Should small isolated catchments be merged into the conservation areas?\noutput_upstream: Should upstream catchments be calculated?\noutput_downstream: Should downstream catchments be calculated?\noutput_hydrology_metrics: Should hydrology metrics be calculated?\narea_land: Catchments column listing the area of land in each catchment.\narea_water: Catchments column listing the area of water in each catchment.\nskeluid: Catchments column listing the skeluid field.\ncatchnum: Catchments column listing the unique catchments ID.\nsubzone: Catchments column listing the hydrological subzone.\nzone: Catchments column listing the hydrological zone.\nbasin: Catchments column listing the basin field.\norder1: Catchments column listing the order 1 field.\norder2: Catchments column listing the order 2 field.\norder3: Catchments column listing the order 3 field.\nstream_length: Catchments column listing stream length.\nintactness: Catchments column listing the intactness value.\nisolated: Catchments column identifying catchments isolated from the stream network.\nunique_identifier: Prefix for conservation area names.\nhandler_summary: Should a summary listing counts of available conservation areas at different intactness and area target proportions be created?\nsummary_intactness_props: If a summary is created, provide the intactness proportions to be summarised in the format ‘0.7,0.8,0.9’.\nsummary_area_target_props: If a summary is created, provide the area target proportions to be summarised in the format ‘0.7,0.8,0.9’."
  },
  {
    "objectID": "tools/builder.html#value",
    "href": "tools/builder.html#value",
    "title": "builder()",
    "section": "",
    "text": "A tibble with column names representing conservation areas, and rows of catchments making up the conservation areas."
  },
  {
    "objectID": "tools/builder.html#details",
    "href": "tools/builder.html#details",
    "title": "builder()",
    "section": "",
    "text": "This function prepares the input tables (neighbours, seeds, catchments) required by BUILDER in a temp file, then creates a string of parameters that is passed to the BUILDER executable using system(). The BUILDER output tables are saved to the temp file, and the output table listing conservation area names and catchment lists is returned to the R session.\nThis function only returns the BUILDER output table describing the lists of catchments making up each conservation area. We typically recommend using the beaconstools package to calculate hydrology metrics, but hydrology information as well as other summary information is produced by BUILDER. If users want access to the complete set of BUILDER output tables (e.g. hydrology and summary information), a valid output directory can be provided in which case all input and output tables will be saved to that directory. If no output directory is provided a temp folder will be used and deleted after the function completes. As well as providing access to the full list of BUILDER output tables, an output directory is useful in a looped workflow with multiple calls to BUILDER producing multiple sets of output files. In this workflow a different output directory can be used to save each set of output files which can later be processed using the beaconstools package. The main output file listing conservation area names and their catchments is named “*_COLUMN_All_Unique_BAs.csv”.\nThe main parameters to adjust when building conservation areas are:\n\nArea target: Set in the seeds table, this defines the minimum size for each conservation area.\nCatchment-level intactness: Only catchments with intactness values greater than this value will be added to the conservation area.\nConservation area intactness: Only conservation areas with an area-weighted intactness greater than or equal to this value will be returned.\nArea-target proportion: The proportion of the Area target that conservation areas need to meet. Allows output of conservation areas smaller than the area target (e.g. if no conservation areas meet 100% of the area target, area target multiplier can be lowered to 0.9 to search for smaller conservation areas)."
  },
  {
    "objectID": "tools/builder.html#examples",
    "href": "tools/builder.html#examples",
    "title": "builder()",
    "section": "",
    "text": "Create the folder structure\n\n# Set working directory\nsetwd(\"your/path/to/downloads\")\n\ndirpath &lt;- getwd()\n\n# Create the folder structure\ntreedir &lt;- c(\"R\",\"data\",\"Builder_output\")\nfor(d in treedir){\n  if (!dir.exists(file.path(dirpath, d))) {\n    dir.create(file.path(dirpath, d), recursive = TRUE)\n  }\n}\n\nDownload the functions, data and example files and save them in the proper folder.\n\n\nDownload builder functions in the R folder\nDownload catchments sample in the data folder\nDownload builder example R script\n\n\nIn R, either:\n\nPlace the files in your working directory (getwd()), or\nUpdate the path in the examples using a data_path variable.\n\nRun the examples below.\n\nlibrary(sf)\n\nsetwd(dirpath)\nsource(\"./R/builder.R\")\n\n# Use all catchments as seeds with a single area target\ncatchments_sample &lt;- readRDS(\"data/catchments_sample.rds\")\n\nnghbrs &lt;- neighbours(catchments_sample)\nseed &lt;- seeds(catchments_sf = catchments_sample, areatarget_value = 1000000000)\nseed &lt;- seed[1:10,]\nbuilder(catchments_sf = catchments_sample, seeds = seed, neighbours = nghbrs, out_dir = file.path(dirpath, \"Builder_output\"))"
  },
  {
    "objectID": "tools/Builder_index.html",
    "href": "tools/Builder_index.html",
    "title": "BEACONs R Tools",
    "section": "",
    "text": "Download builder functions"
  },
  {
    "objectID": "tools/Builder_index.html#beacons-builder",
    "href": "tools/Builder_index.html#beacons-builder",
    "title": "BEACONs R Tools",
    "section": "BEACONs BUILDER",
    "text": "BEACONs BUILDER\nBUILDER is a user friendly software application, developed in C# .NET framework, to assist conservation planners with the design of ecological benchmarks. This package provides a set of R functions to call BUILDER and fetch the main output table. The partner package beaconstools provides functions to process and analyse output tables from BUILDER in R.\nBUILDER explicitly incorporates hydrologic connectivity for the integration of aquatic and terrestrial conservation planning in protected areas design. BUILDER constructs ecological benchmarks using a deterministic construction algorithm that aggregates catchments to a user defined size and intactness. For the purpose of this demo, we will refer to the conservation areas created by BUILDER as benchmarks, however BUILDER can also be used to design conservation areas not intended to serve as benchmarks.\nBUILDER constructs ecological benchmarks based on three principal criteria:\n\nIntactness, a measure of the absence of human industrial activity and a proxy for the intactness of biological and physical processes\nHydrologic connectivity of intact water catchments, as a measure of the integrity of aquatic systems\nSize, as a measure of the resilience of the system to disturbance"
  },
  {
    "objectID": "tools/Builder_index.html#catchments",
    "href": "tools/Builder_index.html#catchments",
    "title": "BEACONs R Tools",
    "section": "Catchments",
    "text": "Catchments\nThe building blocks for BUILDER is a set of catchments with associated flow directions for the underlying stream network. This allows BUILDER to identify upstream and downstream catchments for any given location. Should we provide a brief description of the catchments dataset and how to download them?"
  },
  {
    "objectID": "tools/Builder_index.html#aggregation-algorithm",
    "href": "tools/Builder_index.html#aggregation-algorithm",
    "title": "BEACONs R Tools",
    "section": "Aggregation algorithm",
    "text": "Aggregation algorithm\nBUILDER ‘grows’ ecological benchmarks using a deterministic construction algorithm that aggregates catchments. This process enables intactness, size and hydrologic criteria to be incorporated into benchmark design.\nThe starting catchments for building benchmarks are called seeds. These can be selected using size and intactness criteria e.g., all catchments that are 100% intact and greater than 500km2. Starting from a seed, BUILDER grows a benchmark by aggregating neighbouring catchments that exceed the user defined catchment-level intactness threshold. As catchments are added, growth is prioritized in the upstream direction. This emphasizes inclusion of headwaters within benchmarks, and encourages the formation of benchmarks along stream networks. Further, by adding all eligible upstream catchments before re-querying for more, benchmarks are grown with a more compact shape. If re-querying were to occur after adding each upstream catchment, benchmarks would tend to grow along single streams, resulting in linear configurations. To further compact the shape of the benchmark, BUILDER prioritizes the addition of catchments within hydrological zones (i.e. Fundamental Drainage Areas, FDAs) associated with the benchmark before adding catchments in a neighbouring FDA.\nOnce all available upstream catchments are added, BUILDER grows downstream. Downstream growth adds all neighbouring catchments downstream of the catchment aggregation then re-queries for upstream catchments. Benchmarks are grown until:\n\nThere are no more neighbouring, intact catchments to add, or\nThe benchmarks area exceeds the user-specified Area Target.\n\nIf the latter occurs, and the area-weighted intactness of the benchmark exceeds the benchmark-level intactness threshold, then the benchmark is included in the output."
  },
  {
    "objectID": "tools/Builder_index.html#r-functions",
    "href": "tools/Builder_index.html#r-functions",
    "title": "BEACONs R Tools",
    "section": "R Functions",
    "text": "R Functions\nBEACONs Builder has 4 main functions:\n\nseeds\nreserve_seeds\nneighbours\nbuilder\n\n\nseeds\nThe seeds() function creates a seeds table, which is an input to builder().\nIt identifies seed catchments and assigns them an area target.\n\n\nreserve_seeds\n\n\nneighbours\nThe function neighbours() creates a table listing pairwise catchment neighbours. Used as an input to builder().\n\n\nbuilder\nThe function builder() prepares the input files and parameters and passes them to a command line version of BUILDER executable software that resides inside the benchmarkbuilder package. The function then fetches and returns the main BUILDER output table into the R environment. Should we put something about how to obtain the executable and where to place it?\nUltimately we hope to rewrite the BUILDER executable in R to avoid having to call a third party application. In the meantime, this package allows users to access and automate calls to BUILDER from R.\n\n📤 Output\n\nReturns a tibble of conservation area names and associated catchments.\nIf output_dir is provided, additional BUILDER output tables (e.g., hydrology, summary metrics) are saved.\n\n\n\n🏗️ Process\n\nPrepares input tables: neighbours, seeds, and catchments.\nWrites files to a temp directory (or output_dir if provided).\nConstructs a command to run BUILDER via system().\nbuilder() returns the *_COLUMN_All_Unique_BAs.csv file listing conservation areas and their catchments.\nSubsequent processing, such as creating polygons of benchmarks using builder() output and assessing ecological attributes is done using others BEACONs functions (see examples in section Articles).\n\n\n\n🔧 Key Parameters\n\n\n\n\n\n\n\nParameter\nDescription\n\n\n\n\nArea target\nSet in the seeds table; minimum size (m²) for each conservation area.\n\n\nCatchment intactness\nMinimum intactness required for catchments to be included.\n\n\nConservation area intactness\nMinimum area-weighted intactness for a conservation area to be returned.\n\n\nArea target proportion\nAllows output of smaller areas (e.g., 0.9 returns areas &gt;= 90% of the area target).\n\n\n\n\n\n💡 Tip\nUse output_dir to preserve BUILDER’s complete outputs when running multiple builds. These files can be further analyzed using others BEACONs functions.\n \n##Citation Please cite the beaconsbuilder package when using it in publications. To cite the latest official version, please use:\nEdwards M, Vernier P, Lisgo K, Houle M, Schmiegelow F (2022). beaconsbuilder: building conservation areas in R. R package version 0.0.0.9000. Available at https://github.com/beaconsproject/beaconsbuilder."
  },
  {
    "objectID": "tools/reserve_seeds.html",
    "href": "tools/reserve_seeds.html",
    "title": "reserve_seeds()",
    "section": "",
    "text": "The reserve_seeds() function creates a seeds table based on conservation areas, which is an input to builder().\nIt identifies seed catchments inside a conservation area and assigns them an area target.\nSeed catchments are the starting points for constructing benchmarks.\nThis function provides methods for filtering the catchments dataset and assigning area targets.\n\n\nreserve_seeds(\n  catchments_sf,\n  CAs_sf,\n  CAs_name = NULL,\n  areatarget_value = NULL,\n  joinType = NULL\n)\n\n\n\n\ncatchments_sf: sf object of the catchments dataset with a unique identifier column: CATCHNUM.\nCAs_sf: A character string. Name of the column holding conservation area unique identifiers.\nCAs_name: A character string. Name of the column holding conservation area unique identifiers.\nareatarget_value: (Optional) A single numeric value specifying the area target to apply to all seeds.\njoinType: A character string. Type of spatial join to identify catchments within conservation areas. Options are \"INTERSECT\" or \"CENTROID\". Default is \"CENTROID\".\n\n\n\n\nA tibble of reserve seed catchments and their associated area targets.\n\n\n\n\n\n\nCreate the folder structure\n\n# Set working directory\nsetwd(\"your/path/to/downloads\")\n\ndirpath &lt;- getwd()\n\n# Create the folder structure\ntreedir &lt;- c(\"R\",\"data\",\"Builder_input\")\nfor(d in treedir){\n  if (!dir.exists(file.path(dirpath, d))) {\n    dir.create(file.path(dirpath, d), recursive = TRUE)\n  }\n}\n\nDownload the functions, data and example files and save them in the proper folder.\n\n\nDownload builder functions in the R folder\nDownload catchments sample in the data folder\nDownload catchments sample in the data folder\nDownload reserve_seeds example R script\n\n\nIn R, either:\n\nPlace the files in your working directory (getwd()), or\nUpdate the path in the examples using a data_path variable.\n\nRun the examples below.\n\nlibrary(dplyr)\nlibrary(sf)\nlibrary(utils)\n\nsource(\"./R/builder.R\")\n\n# Use all catchments as seeds with a single area target\ncatchments_sample &lt;- readRDS(\"data/catchments_sample.rds\")\nreserves_sample &lt;- readRDS(\"data/reserves_sample.rds\")\nreserve_seeds(catchments_sf = catchments_sample, CAs_sf = reserves_sample, CAs_name = \"reserve\", areatarget_value = 1000000000)\n\n# save seeds as csv\nreserve_seed &lt;- reserve_seeds(catchments_sf = catchments_sample, CAs_sf = reserves_sample, CAs_name = \"reserve\", areatarget_value = 1000000000)\nwrite.csv(reserve_seed, file=file.path(dirpath,\"Builder_input/reserve_seeds.csv\"), row.names=FALSE)"
  },
  {
    "objectID": "tools/reserve_seeds.html#usage",
    "href": "tools/reserve_seeds.html#usage",
    "title": "reserve_seeds()",
    "section": "",
    "text": "reserve_seeds(\n  catchments_sf,\n  CAs_sf,\n  CAs_name = NULL,\n  areatarget_value = NULL,\n  joinType = NULL\n)"
  },
  {
    "objectID": "tools/reserve_seeds.html#arguments",
    "href": "tools/reserve_seeds.html#arguments",
    "title": "reserve_seeds()",
    "section": "",
    "text": "catchments_sf: sf object of the catchments dataset with a unique identifier column: CATCHNUM.\nCAs_sf: A character string. Name of the column holding conservation area unique identifiers.\nCAs_name: A character string. Name of the column holding conservation area unique identifiers.\nareatarget_value: (Optional) A single numeric value specifying the area target to apply to all seeds.\njoinType: A character string. Type of spatial join to identify catchments within conservation areas. Options are \"INTERSECT\" or \"CENTROID\". Default is \"CENTROID\"."
  },
  {
    "objectID": "tools/reserve_seeds.html#value",
    "href": "tools/reserve_seeds.html#value",
    "title": "reserve_seeds()",
    "section": "",
    "text": "A tibble of reserve seed catchments and their associated area targets."
  },
  {
    "objectID": "tools/reserve_seeds.html#examples",
    "href": "tools/reserve_seeds.html#examples",
    "title": "reserve_seeds()",
    "section": "",
    "text": "Create the folder structure\n\n# Set working directory\nsetwd(\"your/path/to/downloads\")\n\ndirpath &lt;- getwd()\n\n# Create the folder structure\ntreedir &lt;- c(\"R\",\"data\",\"Builder_input\")\nfor(d in treedir){\n  if (!dir.exists(file.path(dirpath, d))) {\n    dir.create(file.path(dirpath, d), recursive = TRUE)\n  }\n}\n\nDownload the functions, data and example files and save them in the proper folder.\n\n\nDownload builder functions in the R folder\nDownload catchments sample in the data folder\nDownload catchments sample in the data folder\nDownload reserve_seeds example R script\n\n\nIn R, either:\n\nPlace the files in your working directory (getwd()), or\nUpdate the path in the examples using a data_path variable.\n\nRun the examples below.\n\nlibrary(dplyr)\nlibrary(sf)\nlibrary(utils)\n\nsource(\"./R/builder.R\")\n\n# Use all catchments as seeds with a single area target\ncatchments_sample &lt;- readRDS(\"data/catchments_sample.rds\")\nreserves_sample &lt;- readRDS(\"data/reserves_sample.rds\")\nreserve_seeds(catchments_sf = catchments_sample, CAs_sf = reserves_sample, CAs_name = \"reserve\", areatarget_value = 1000000000)\n\n# save seeds as csv\nreserve_seed &lt;- reserve_seeds(catchments_sf = catchments_sample, CAs_sf = reserves_sample, CAs_name = \"reserve\", areatarget_value = 1000000000)\nwrite.csv(reserve_seed, file=file.path(dirpath,\"Builder_input/reserve_seeds.csv\"), row.names=FALSE)"
  }
]