---
title: "Target-Based Representation Analysis on Conservation Areas using Proportional Representation"
format: html
---


## Intro

Representation analyses typically include multiple layers assumed to represent a range of ecological processes. They often include climate layers, productivity, riparian zones etc.  a target-based approach using proportional representation. This is useful when you want to ensure specific target areas of different representation classes are met in one or multiple conservation areas.

The goal of the representation analysis is to identify conservation areas that adequately capture the target amounts of representation classes (in our case NALC classes) deemed to be proportionally representative of the study region. Usually the target amounts should be met in full in a conservation area, rather than being split between multiple conservation areas. The idea being that the conservation area should provide a sufficient area for the ecological processes associated with specific target classes to operate. In a network of multiple conservation areas, different target classes and different ecological processes may therefore be represented by different conservation areas.

For this example we will use a single layer (NALC) to assess representation of the 13 land cover classes that fall within our study area. The study area is a Fundamental Drainage Area in Yukon, Canada (FDA 09EA).


### Generate potential benchmarks, upstream and downstream polygons from catchments using **BUILDER** output files

Function `fetch_builder_output` allow to read Builder output tables that uses column format. The output can then be passed to dissolve_catchment_from_table to generate polygons using enumerated 'CATCHNUM'. `fetch_builder_output` needs the following:

- **out_dir**: Point to a directory that contains Builder output
- **type**: Indicate which file to read. Type can be 'BENCHMARKS', 'UPSTREAM' or 'DOWNSTREAM'. Default is 'BENCHMARKS'.

Note that the tools can accommodate different objectives. For example, meeting a set of targets across a network rather than meeting each target in full in a single conservation area. We give an example of this below.

```{r Builder_polygons, fig.width=10, fig.height=6,  message=FALSE, warning=FALSE}
# Load required libraries
library(sf)
library(dplyr)
library(tidyr)
library(utils)
library(ggplot2)
library(RColorBrewer)
library(here)

# --------------------------------------
# SET PARAMS  --------------------
# --------------------------------------
# Set working directory
dirpath <- here(".")

# Source BEACONs functions
source(file.path(dirpath,"R/spatial.R"))
source(file.path(dirpath,"R/builder.R"))
source(file.path(dirpath,"R/utils.R"))

# Folder path to the benchmarkbuilder executable
builder_path <- here("builder")

# Set Builder output path (create the folder structure if missing)
builder_dir <- file.path(dirpath, "output/Builder_output")
if (!dir.exists(builder_dir)) {
  dir.create(builder_dir)
}

# Create the folder structure to receive output polygons
out_dir <- file.path(dirpath, "output/shp_output")
if (!dir.exists(out_dir)) {
  dir.create(out_dir, recursive = TRUE)
}

# Prefix given to identify unique conservation areas
colName <- "PB"


# --------------------------------------
#--RUN
# --------------------------------------

# Use conservation areas as reserve seeds
catchments <- st_read(file.path(dirpath,"data/catchments_sample.shp"))
conservation_areas <- st_read(file.path(dirpath,"data/reserves_sample.shp"))

# Run BUILDER
nghbrs <- neighbours(catchments)
seed <- seeds(catchments, areatarget_value = 100000000)
builder(catchments_sf = catchments, data_source = "catchment", seeds = seed, neighbours = nghbrs, out_dir = builder_dir, builder_local_path = builder_path, catchment_level_intactness = 0.8, conservation_area_intactness = 1, output_upstream = TRUE, output_downstream = TRUE)


#############################################
#  Generate potential conservation areas polygons
#############################################
type <- "BENCHMARKS"
out_tab <- fetch_builder_output(builder_dir, type = type)

# Convert builder output tables to polygons
PBx_sf <- dissolve_catchments_from_table(catchments_sf = catchments, 
                                             input_table = out_tab, 
                                             out_feature_id = colName)


#############################################
#  Generate upstream polygons
#############################################
type <- "UPSTREAM"
out_tab <- fetch_builder_output(builder_dir, type = type)

# Convert builder output tables to polygons
upPBx_sf <- dissolve_catchments_from_table(catchments_sf = catchments, 
                                             input_table = out_tab, 
                                             out_feature_id = colName)


#############################################
#  Generate downstream polygons
#############################################
type <- "DOWNSTREAM"
out_tab <- fetch_builder_output(builder_dir, type = type)

# Convert builder output tables to polygons
downPBx_sf <- dissolve_catchments_from_table(catchments_sf = catchments, 
                                             input_table = out_tab, 
                                             out_feature_id = colName)


# Map example
# Get the first conservation area ID
first_pb_id <- PBx_sf$PB[13]

# Filter all layers for this conservation area
pb1      <- PBx_sf[PBx_sf$PB == first_pb_id, ] %>% mutate(type = "Conservation Area")
up_pb1   <- upPBx_sf[upPBx_sf$PB == first_pb_id, ] %>% mutate(type = "Upstream")
down_pb1 <- downPBx_sf[downPBx_sf$PB == first_pb_id, ] %>% mutate(type = "Downstream")

# Combine layers 
overlay_data <- rbind(pb1, up_pb1, down_pb1)

# Plot all layers together
ggplot() +
  geom_sf(data = catchments, fill = NA, color = "black", size = 0.2) +
  geom_sf(data = overlay_data, aes(fill = type), color = "black", alpha = 0.6) +
  scale_fill_manual(
    name = "Type",
    values = c(
      "Conservation Area" = "tan",
      "Upstream" = "green4",
      "Downstream" = "steelblue1"
    )
  ) +
  labs(
    title = paste("Conservation Area and Related Units:", first_pb_id),
    subtitle = "Mapped with upstream and downstream polygons",
    x = NULL, y = NULL
  ) +
  theme_minimal() +
  theme(legend.position = "right")
  
  
# Save 
write_sf(PBx_sf, dsn =file.path(out_dir, "CAs_poly.shp"), append = FALSE)
write_sf(upPBx_sf, dsn =file.path(out_dir, "upstream_poly.shp"), append = FALSE)
write_sf(downPBx_sf, dsn =file.path(out_dir, "downstream_poly.shp"), append = FALSE)
```

